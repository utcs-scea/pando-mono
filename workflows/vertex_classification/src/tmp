
    std::uint64_t numEdgeAccesses{0};
    std::uint64_t i{0}, e{0};
    std::uint64_t totalTypes{0}, totalETypes{0}, totalEdges{0};
    for (typename Graph::VertexTopologyID vert : lift(*dGraphPtr, vertices)) {
      typename Graph::VertexData vData = fmap(*dGraphPtr, getData, vert);

      std::cout << i++ << ", localindex:" << fmap(*dGraphPtr, getVertexIndex, vert) << ", "
                << static_cast<int>(vData.type)
                << ", numedges:" << fmap(*dGraphPtr, getNumEdges, vert) << "\n";
      totalEdges += fmap(*dGraphPtr, getNumEdges, vert);
      totalTypes += static_cast<int>(vData.type);
      for (typename Graph::EdgeHandle eh : fmap(*dGraphPtr, edges, vert)) {
        typename Graph::VertexTopologyID dst = fmap(*dGraphPtr, getEdgeDst, eh);
        typename Graph::EdgeData edgeData = fmap(*dGraphPtr, getEdgeData, eh);
        typename Graph::VertexData dData = fmap(*dGraphPtr, getData, dst);
        totalETypes += static_cast<int>(edgeData.type);
        std::cout << ">>>" << e << ", localindex:" << fmap(*dGraphPtr, getVertexIndex, dst) << ", "
                  << static_cast<int>(edgeData.type) << ", ddata:" << static_cast<int>(dData.type)
                  << "\n";
        ++e;
        ++numEdgeAccesses;
      }
    }

#if false
    if (false) {
      std::cout << "vertex size:" << dOldGraph.size() << "\n";
      for (std::uint64_t v = 0; v < dOldGraph.size(); ++v) {
        std::uint64_t vtoken = dOldGraph.getTokenID(v);
        std::uint64_t vtype =
            static_cast<std::uint64_t>(static_cast<OldVertexType>(dOldGraph.getData(v))).type;
        for (std::uint64_t e = dOldGraph.edgeBegin(v);
             e < dOldGraph.edgeEnd(v); ++e) {
          std::uint64_t dst = dOldGraph.getEdgeDst(e);
          std::uint64_t dstToken = dOldGraph.getTokenID(dst);
          std::uint64_t edgeType = static_cast<std::uint64_t>(
              static_cast<OldEdgeType>(dOldGraph.getEdgeData(e)).type);
          std::uint64_t dstType = static_cast<std::uint64_t>(
              static_cast<OldVertexType>(dOldGraph.getData(dst)).type);
          std::cout << vtoken << "," << vtype << "," << edgeType << "," << dstToken << "," <<
            dstType << "\n" << std::flush;
        }
      }
    } else {
      pando::Vector<std::uint64_t> vertexEdgeOffsetLocaleCounters_;
      pando::Vector<std::uint64_t> vertexDataLocaleCounters_;
      pando::Vector<std::uint64_t> vertexDstAccessCounters_;
      pando::Vector<std::uint64_t> edgeDstLocaleCounters_;
      pando::Vector<std::uint64_t> edgeDataLocaleCounters_;

      pando::Vector<std::uint64_t> vertexEdgeOffsetRemoteCounters_;
      pando::Vector<std::uint64_t> vertexDataRemoteCounters_;
      pando::Vector<std::uint64_t> edgeDstRemoteCounters_;
      pando::Vector<std::uint64_t> edgeDataRemoteCounters_;

      pando::Vector<std::uint64_t> vertexEdgeOffsetRemoteDstCounters_;
      pando::Vector<std::uint64_t> vertexDataRemoteDstCounters_;
      pando::Vector<std::uint64_t> edgeDstRemoteDstCounters_;
      pando::Vector<std::uint64_t> edgeDataRemoteDstCounters_;

      std::uint64_t numPXNs = pando::getPlaceDims().node.id;

      PANDO_CHECK(vertexEdgeOffsetLocaleCounters_.initialize(numPXNs));
      PANDO_CHECK(vertexDataLocaleCounters_.initialize(numPXNs));
      PANDO_CHECK(vertexDstAccessCounters_.initialize(numPXNs));
      PANDO_CHECK(edgeDstLocaleCounters_.initialize(numPXNs));
      PANDO_CHECK(edgeDataLocaleCounters_.initialize(numPXNs));
      PANDO_CHECK(vertexEdgeOffsetRemoteCounters_.initialize(numPXNs));
      PANDO_CHECK(vertexDataRemoteCounters_.initialize(numPXNs));
      PANDO_CHECK(edgeDstRemoteCounters_.initialize(numPXNs));
      PANDO_CHECK(edgeDataRemoteCounters_.initialize(numPXNs));
      PANDO_CHECK(vertexEdgeOffsetRemoteDstCounters_.initialize(numPXNs));
      PANDO_CHECK(vertexDataRemoteDstCounters_.initialize(numPXNs));
      PANDO_CHECK(edgeDstRemoteDstCounters_.initialize(numPXNs));
      PANDO_CHECK(edgeDataRemoteDstCounters_.initialize(numPXNs));

      for (std::uint64_t i = 0; i < vertexDataLocaleCounters_.size(); ++i) {
        vertexDataLocaleCounters_[i] = 0;
        vertexDataRemoteCounters_[i] = 0;
        vertexDstAccessCounters_[i] = 0;
      }
      for (std::uint64_t i = 0; i < vertexEdgeOffsetLocaleCounters_.size(); ++i) {
        vertexEdgeOffsetLocaleCounters_[i] = 0;
        vertexEdgeOffsetRemoteCounters_[i] = 0;
      }
      for (std::uint64_t i = 0; i < edgeDstLocaleCounters_.size(); ++i) {
        edgeDstLocaleCounters_[i] = 0;
        edgeDstRemoteCounters_[i] = 0;
        edgeDstRemoteDstCounters_[i] = 0;
      }
      for (std::uint64_t i = 0; i < edgeDataLocaleCounters_.size(); ++i) {
        edgeDataLocaleCounters_[i] = 0;
        edgeDataRemoteCounters_[i] = 0;
        edgeDataRemoteDstCounters_[i] = 0;
      }

      std::uint64_t numEdgeAccesses{0};
      for (typename Graph::VertexTopologyID vert : lift(*dGraphPtr, vertices)) {
        pando::GlobalRef<typename Graph::VertexData> vDataRef = fmap(*dGraphPtr, getData, vert);
        typename Graph::VertexData vData = vDataRef;
        //std::cout << "src," << (uint64_t) fmap(*dGraphPtr, getTokenID, vert)
        //  << ", " << (uint64_t) vData.type << "\n" << std::flush;

        std::uint64_t vLoc = pando::localityOf(&vert).node.id;
        std::uint64_t vDataLoc = pando::localityOf(&vDataRef).node.id;
        std::cout << "vLoc:" << vLoc << "\n";
        vertexDataLocaleCounters_[vDataLoc] += 1;
        for (typename Graph::EdgeHandle eh : fmap(*dGraphPtr, edges, vert)) {
          pando::GlobalRef<typename Graph::EdgeData> edgeDataRef =
              fmap(*dGraphPtr, getEdgeData, eh);
          typename Graph::EdgeData edgeData = edgeDataRef;
          typename Graph::VertexTopologyID dst = fmap(*dGraphPtr, getEdgeDst, eh);
          pando::GlobalRef<typename Graph::VertexData> dstDataRef = fmap(*dGraphPtr, getData, dst);
          typename Graph::VertexData dstData = dstDataRef;
          std::uint64_t edgeDataLoc = pando::localityOf(&edgeDataRef).node.id;
          std::uint64_t dstLoc = pando::localityOf(&dstDataRef).node.id;
          if (vLoc == edgeDataLoc) {
            edgeDataLocaleCounters_[edgeDataLoc] += 1;
          } else {
            edgeDataRemoteCounters_[edgeDataLoc] += 1;
          }


          if (vLoc != dstLoc) {
            edgeDstRemoteDstCounters_[dstLoc] += 1;
            edgeDstRemoteCounters_[vLoc] += 1;
          } else {
            edgeDstLocaleCounters_[vLoc] += 1;
          }

          std::cout << vLoc << " and " << dstLoc << " and edge:" << edgeDataLoc << "\n";

          edgeDataRemoteDstCounters_[edgeDataLoc] += 1;

          std::cout << (uint64_t) fmap(*dGraphPtr, getTokenID, vert) << ","
            << (uint64_t) vData.type << "," << (uint64_t) edgeData.type << ","
            << (uint64_t) fmap(*dGraphPtr, getTokenID, dst) << "," <<
               (uint64_t) dstData.type << "\n" << std::flush;
          numEdgeAccesses++;
        }
      }

      std::uint64_t numEdgeAccesses2{0};
      for (std::uint64_t pxn = 0; pxn < numPXNs; ++pxn) {
        std::cout << "PXN:" << pxn << "\n";
        std::cout << "vertex local access:" << vertexDataLocaleCounters_[pxn] << "\n";
        std::cout << "edge local access:" << edgeDataLocaleCounters_[pxn] << "\n";
        std::cout << "edge remote src access:" << edgeDataRemoteCounters_[pxn] << "\n";
        std::cout << "edge all data access:" << edgeDataRemoteDstCounters_[pxn] << "\n";
        std::cout << "edgedst remote src access:" << edgeDstRemoteCounters_[pxn] << "\n";
        std::cout << "edgedst remote dst access:" << edgeDstRemoteDstCounters_[pxn] << "\n";
        std::cout << "edgedst local access:" << edgeDstLocaleCounters_[pxn] << "\n";
        numEdgeAccesses2 += edgeDstLocaleCounters_[pxn] + edgeDstRemoteCounters_[pxn];
      }

      std::cout << "edge access:" << numEdgeAccesses << " vs " <<
          numEdgeAccesses2 << "\n";
    }
#endif
